/** @jsx React.DOM */
var RestrictionItem = React.createClass({
    handleDeleteClick: function(){
        if(this.state.awaitingDeleteConfirmation){
            var restrictionDOM = this.refs.restrictionId.getDOMNode();

            this.props.removeRestriction(restrictionDOM.value);

            this.setState({awaitingDeleteConfirmation: false});
        } else {
            this.setState({awaitingDeleteConfirmation: true});
        }
    },

    handleCancelClick: function(){
        this.setState({awaitingDeleteConfirmation: false});
    },

    getInitialState: function() {
        return {awaitingDeleteConfirmation: false};
    },

    render: function(){
        var text = this.props.restrictionID == "" ? "" :
this.state.awaitingDeleteConfirmation ? "confirm" : "delete";
        var rowClass = this.state.awaitingDeleteConfirmation ?
"dynamic_list_marked_for_deletion" : "";

        var cancelText = this.state.awaitingDeleteConfirmation ? (
            <span className="link"
onClick={this.handleCancelClick}>cancel</span>
        ) : "";


        return (
            <div className={rowClass}>
                <input type="hidden" value={this.props.restrictionID}
ref="restrictionId" />
                <div
className="dynamic_list_item_short">{this.props.userName}</div>
                <div
className="dynamic_list_item_wide">{this.props.objectName}</div>
                <div className="dynamic_list_item_utility">
                    <span className="link dynamic_list_link"
onClick={this.handleDeleteClick}>{text}</span> {cancelText}
                </div>
            </div>
        );
    }
});

var RestrictionList = React.createClass({
    render: function(){
        var removeRestrictionHandler = this.props.removeRestriction;

        var listItems = this.props.restrictions.map(function(restriction){
          return (
            <RestrictionItem key={restriction.RestrictionId}
removeRestriction={removeRestrictionHandler} userName={restriction.UserName}
userID={restriction.UserId} objectName={restriction.ObjectName}
restrictionID={restriction.RestrictionId}/>
          )
        });

        return (
            <div className="dynamic_list_items">
                {listItems}
            </div>
        );
    }
});

var RestrictionAddForm = React.createClass({
    handleAddButtonClick: function() {
        this.setState({isAddingItem: !this.state.isAddingItem});
    },

    handleAddRestrictionSubmit: function(){
        var adminDom  = this.refs.admins.getDOMNode();
        var objectDom = this.refs.objects.getDOMNode();

        var adminName = adminDom.options[adminDom.selectedIndex].text;
        var adminId = adminDom.value;

        var objectName = objectDom.options[objectDom.selectedIndex].text;
        var objectId = objectDom.value;

        this.props.addRestriction(adminName, adminId, objectName, objectId);

        if(!adminId || !objectId){
            return false;
        }

        this.setState({isAddingItem: false});
        return false;
    },

    getInitialState: function() {
        return {isAddingItem: false};
    },

    render: function(){
        if(this.state.isAddingItem){
            var adminOptions = this.props.admins.map(function(admin){
                return (
                    <option key={admin.UserId}
value={admin.UserId}>{admin.UserName}</option>
                );
            });

            var objectOptions = this.props.objects.map(function(object){
                return (
                    <option key={object.ObjectId}
value={object.ObjectId}>{object.ObjectName}</option>
                );
            });

            return (
                <div>
                    <form className="inlineForm"
onSubmit={this.handleAddRestrictionSubmit}>
                        <div className="dynamic_list_new_box">
                            <select ref="admins">
                                {adminOptions}
                            </select>
                        </div>

                        <div className="dynamic_list_new_box">
                            <select ref="objects">
                                {objectOptions}
                            </select>
                        </div>

                        <div className="dynamic_list_new_box">
                            <button>Save</button>
                        </div>
                    </form>
                    <div className="dynamic_list_new_box">
                        <button
onClick={this.handleAddButtonClick}>Cancel</button>
                    </div>
                </div>
            );
        }
        else {
            return (
                <div>
                    <button onClick={this.handleAddButtonClick}>Add</button>
                </div>
            );
        }
    }
});

var RestrictionApp = React.createClass({
    loadListFromServer: function() {
        $.ajax({
            url: this.props.urlFetch,
            dataType: 'json',
            success: function(data) {
                this.setState({restrictions: data.restrictions, admins:
data.admins, objects: data.objects});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },

    getInitialState: function() {
        return {restrictions: [], admins: [], objects: []};
    },

    componentDidMount: function() {
        this.loadListFromServer();
        //setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },

    addRestriction: function(adminName, adminId, objectName, objectId){
        var restrictions = this.state.restrictions;
        var newRestrictions = restrictions.concat([{UserName: adminName,
UserId: adminId, ObjectName: objectName, RestrictionId: ""}]);
        this.setState({restrictions: newRestrictions});

        $.ajax({
            url: this.props.urlSave,
            dataType: 'json',
            type: 'POST',
            data: {adminId: adminId, objectId: objectId},
            success: function(data) {
                this.setState({restrictions: data.restrictions, admins:
data.admins, objects: data.objects});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });

        return false;  //suppress POST
    },

    removeRestriction: function(restrictionId){
        var restrictions = this.state.restrictions;

        var deleteFilter = function(element){
            return element.RestrictionId != restrictionId;
        };

        var newRestrictions = restrictions.filter(deleteFilter);

        this.setState({restrictions: newRestrictions});

        $.ajax({
            url: this.props.urlDelete,
            dataType: 'json',
            type: 'POST',
            data: {restrictionId: restrictionId},
            success: function(data) {
                this.setState({restrictions: data.restrictions, admins:
data.admins, objects: data.objects});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });

        return false;  //suppress POST
    },

    render: function(){
        return (
            <div className="dynamic_list_container">
                <div className="dynamic_list_header">
                    <RestrictionAddForm addRestriction={this.addRestriction}
admins={this.state.admins} objects={this.state.objects}/>
                </div>
                <RestrictionList removeRestriction={this.removeRestriction}
restrictions={this.state.restrictions}/>
            </div>
        );
    }
});

React.renderComponent(
    <RestrictionApp urlFetch="GetProductlineRestrictions"
urlSave="SaveProductlineRestriction"
urlDelete="DeleteProductlineRestriction" />,
    document.getElementById('productLineRestrictionsBox')
);

React.renderComponent(
    <RestrictionApp urlFetch="GetSlideRestrictions"
urlSave="SaveSlideRestriction" urlDelete="DeleteSlideRestriction" />,
    document.getElementById('slideRestrictionsBox')
);